# vim: filetype=cmake
cmake_minimum_required(VERSION 3.22.2)
project()

option(ENABLE_DEBUG OFF)

if (${ENABLE_DEBUG})
    set(CMAKE_BUILD_TYPE "Debug")
else()
    set(CMAKE_BUILD_TYPE "Release")
endif()
set(CMAKE_BINARY_DIR "${PROJECT_SOURCE_DIR}/build")
# 生成 compile_commands.json 文件，一些用具会用它来进行语法辅助，比如 ccls
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
file(CREATE_LINK build/compile_commands.json "${PROJECT_SOURCE_DIR}/compile_commands.json" SYMBOLIC)
# 设置 GCC 编译选项
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wall -g3 -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
set(CMAKE_CXX_STANDARD 17)
# 设置源文件目录
set(MAIN_SOURCE "${PROJECT_SOURCE_DIR}/src/main")
set(TEST_SOURCE "${PROJECT_SOURCE_DIR}/src/test")

# 扫描源文件
file(GLOB_RECURSE CPP_FILES "${MAIN_SOURCE}/*.cpp")
file(GLOB_RECURSE HPP_FILES "${MAIN_SOURCE}/*.hpp")
list(REMOVE_ITEM CPP_FILES "${MAIN_SOURCE}/main.cpp")
set(SRC_FILES ${CPP_FILES} ${HPP_FILES})
add_executable(${PROJECT_NAME} "${MAIN_SOURCE}/main.cpp" ${SRC_FILES})
install(${PROJECT_NAME})

if (${ENABLE_DEBUG})
    file(GLOB_RECURSE CPP_TEST_FILES "${TEST_SOURCE}/*.cpp")
    file(GLOB_RECURSE HPP_TEST_FILES "${TEST_SOURCE}/*.hpp")
    set(UNIT_SRC ${SRC_FILES} ${CPP_TEST_FILES} ${HPP_TEST_FILES})
    # 单元测试
    set(UNIT_TEST ${PROJECT_NAME}_test)
    add_executable(${UNIT_TEST} ${UNIT_SRC})
endif()
